<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="emp">
	
  	<resultMap type="emp" id="empMap">
  		<id property="empId" column="emp_id"/>
  		<result property="empName" column="emp_name"/>
  		<result property="empNo" column="emp_no"/>
  		<result property="email" column="email"/>
  		<result property="phone" column="phone"/>
  		<!-- <result property="deptCode" column="dept_code"/> -->
  		<result property="jobCode" column="job_code"/>
  		<result property="salLevel" column="sal_level"/>
		<result property="salary" column="salary"/>
  		<result property="bonus" column="bonus"/>
  		<result property="managerId" column="manager_id"/>
  		<result property="hireDate" column="hire_date"/>
  		<result property="entDate" column="ent_date"/>
  		<result property="entYn" column="ent_yn"/>
  		<result property="gender" column="gender"/>
  		  		
  		<!-- 2022-12-30 -->
  		<!-- has a 로 클래스 타입을 한개 가지고 있을 떄 association 태그를 사용 -> 1:1관계 -->
  		<association property="dept" resultMap="departmentMap"></association>
  	</resultMap>  
  	
  	<!-- 2022-12-30 -->
  	<resultMap type="department" id="departmentMap">
  		<id property="deptId" column="dept_id"/>
  		<result property="deptTitle" column="dept_title"/>
  		<result property="locationId" column="location_id"/>
  		<collection property="employees" resultMap="empMap"/>
  	</resultMap>
  	
  	<select id="selectDept" parameterType="string" resultMap="departmentMap">
  		SELECT * 
  		FROM DEPARTMENT JOIN EMPLOYEE ON DEPT_ID=DEPT_CODE
  		WHERE DEPT_CODE=#{deptId} 
  	</select>
  	
  
	<select id="selectEmpAll" resultMap="empMap">
  		SELECT * FROM EMPLOYEE LEFT JOIN DEPARTMENT ON DEPT_CODE=DEPT_ID
	</select> 
  
  	<!-- 
  		파라미터타입은 생략이 가능하다. 알아서 찾아 씀 
  		${} : 테이블명, 컬럼명을 표시하는 값 . 자료형을 표시하지 않음
  		#{} : 컬럼의 비교대상이나 대입해야 하는 값. 자료형 유지
  		
  	 -->
  	 
  	<!-- 
  		WHERE절을 쓸 땐 where태그/trim를 활용
  		약간의 편법을 쓸수도 있따 where를 살리고->AND 땜에 문제가 되니까 기본조건(걍 당연히 되는 거 -> 1=1)을 넣기 
  		-> 그럼 and,or땜에 문제가 되는 일이 없슴 
  	 -->
<!--   	<select id="searchEmp" parameterType="map" resultMap="empMap">
  		SELECT *
  		FROM(SELECT e.*, DECODE(SUBSTR(EMP_NO,8,1),1,'M',2,'F') AS GENDER FROM EMPLOYEE e)	  		
  		
  		WHERE 1=1
  		<where>
  		<trim prefix="where" prefixOverrides="AND/OR">
  			<if test="keyword != null and keyword != ''">
  				AND ${type} LIKE '%'||#{keyword}||'%' 
  			</if>
  			<if test="gender != null and gender != ''">
			  	AND GENDER=#{gender}
	  		</if> 		
  		</trim>
  		</where> 
  		
  	
  	</select> -->
	<select id="searchEmp" parameterType="map" resultMap="empMap">
		SELECT * 
		FROM (
		SELECT E.*,D.*, DECODE(SUBSTR(EMP_NO,8,1),'1','M','2','F') AS GENDER FROM EMPLOYEE E 
		LEFT JOIN DEPARTMENT D ON E.DEPT_CODE=DEPT_ID) 
		
		<!-- AND가 문제이기때문에 약간의 트릭으로 WHERE 다음에 영향 없는 조건을 넣어서 AND가 문제없이 실행되도록 할 수도 있음  -->		
		WHERE 1=1
		<if test="keyword!=null and keyword!='' ">
			AND ${type} LIKE '%'||#{keyword}||'%' 
		</if>
		<if test="gender!=null and gender!='' ">
			AND GENDER=#{gender}
		</if>
       
		<if test="salary!=null and salary!=''">
		
			<!-- <if test="salFlag == 'ge'">
				AND SALARY >= #{salary}		
			</if>
			<if test="salFlag eq 'le'">
				AND SALARY <![CDATA[<=]]> #{salary}
				AND SALARY &lt;= #{salary}
			</if> -->
			
        <!-- 트림도 가능! -->
        <!-- <trim prefix="where" prefixOverrides="AND|OR">
           <if test="keyword!=null and keyword!='' ">
              AND ${type} LIKE '%'||#{keyword}||'%' 
           </if>
           <if test="gender!=null and gender!='' ">
              AND GENDER=#{gender}
           </if>
        </trim> -->
        
        
        <!-- where태그를 쓰면 알아서 and를 파싱함 -->
        <!-- <where>
           <if test="keyword!=null and keyword!='' ">
              AND ${type} LIKE '%'||#{keyword}||'%' 
           </if>
           <if test="gender!=null and gender!='' ">
              AND GENDER=#{gender}
           </if>
        </where> -->			
			
			<choose>
				<when test="salFlag eq 'ge'">
					AND SALARY >= #{salary}
				</when>
				<otherwise>				
					AND SALARY &lt;= #{salary}
				</otherwise>
			</choose>
		</if>	
		
		<if test="hireDate != null and hireDate !=''">
			<choose>
				<when test="hireFlag eq 'le'">
					AND HIRE_DATE <![CDATA[<=]]> TO_DATE(#{hireDate},'YY/MM/DD')
				</when>
				<when test="hireFlag eq 'ge'">
					AND HIRE_DATE <![CDATA[>=]]> TO_DATE(#{hireDate},'YY/MM/DD')				
				</when>
			</choose>
		</if>
		
		<if test="jobs!=null and jobs!=''">
			<!-- AND job_code in (?,?,?...) -->
			<!-- foreach태그를 이용 
				* 속성 *
				 collection : 배열값, 다중값을 가진 변수명(key) 
				 item : 다중값을 한개씩 저장하는 변수(jstl var랑 비슷)
				 open : 반복 시작할 때 출력할 문자 지정
				 close : 반복이 끝나고 출력할 문자 지정
				 separator: 반복문이 실행될 때마다 출력할 문자 지정
				 index : 배열의 인덱스 번호 (생략가넝)
			-->
			AND JOB_CODE IN 
			<foreach collection="jobs" item="job" open="(" close=")" separator=",">#{job}</foreach>
		</if>
        

     
     </select>
  
</mapper>
